1. Create a repository

	cd Documents
	mkdir testing
	cd testing
	git init


2. Make some changes -- add some files, change content of some files

	echo "my first change" >change.txt
	git status  							// showing change.txt as untracked file
	add change.txt
	git status  							// showing change.txt in to be commited section
	vi change.txt
									//after editing using insert mode 
									//save and quit
	git status

#	to  be commited -->change.txt
#	modified --> change.txt

	add change.txt

3. commit changes

	git commit -m "add change file"

4. repeat steps 1-3 for 2 more times. try to remove and ignore some files . Use git diff before each commit.

	git rm change.txt
	echo "*.html
	!readme.html
	*.c" > .gitignore
	echo "read and follow">readme.html
	add readme.html
	git diff master
	git commit -m "my second commit"

5. create changes and revert those changes using git when those changes are not added to staging are

//	before staging all files and directory are in untracked section we can just delete them using

	rm file_name
	rmdir folder_name

//	or if we have modified anything then we can just re modified it to its back stage manually by using any editor.
//	then add it & commit it.

6. create changes and revert those changes after adding changes to staging area

	git reset file_name 				//file is unstage

7. create change and revert those changes after committing those changes .

	git revert HEAD

//	a file opens enter new commit message or leave it and then save it.
 
8. Check repository status before adding changes to staging area, after adding changes to staging area and after committing changes .

				//before adding changes to staging area
	git status

				//shows files in untracked section.

				//after adding changes to staging area
	git add file_name
	git status
				//shows file in to be commited section

				//after committing changes
	git commit -m "message"
				//shows nothing to be commited

9. Display all the commits .

	git log

	git log --pretty="oneline"

10. Display a specific commit .

	git log --pretty="oneline"	
					//now note down sha code of a commit 
	git show sha_code

11. create branches called "feature1" and "feature2" from master. 11 . Delete branch "feature2".

	git branch feature1
	git branch feature2
	git branch -d feature2

12. Make some commits on "feature1".

	git checkout feature1
	echo "first branch commit"> branch_file
	git add branch_file
	git commit -m "add branch file"

13.Make some commits on branch "master".

	git checkout master
	echo "hello master branch"> master_file
	git add master_file
	git commit -m "add master file"

14. merge branch "feature1" in "master" (make some conflicts by changing same file on same line in both the branches) 

					//after editing same file on same line in both the branches
	git merge feature1 master
					//follwing error generated	
--Auto-merging change.txt
CONFLICT (content): Merge conflict in change.txt
Automatic merge failed; fix conflicts and then commit the result.
				
					//manually edit the file then again try the merge
15. create branch "feature2" from master .

	git checkout master
	git branch feature2

16. Make some commits on "feature2".

	git checkout feature2
	echo "hello feature2 branch"> feature2_file
	git add feature2_file
	git commit -m "add feature2 file"


17. Make some commits on branch "master".

	git checkout master
	echo "hello master branch"> feature2_file
	git add feature2_file
	git commit -m "add feature2 file"

18. rebase branch "master" in "feature2" (make some conflicts by changing same file on same line in both the branches) .

	git checkout master
	git rebase feature2

19. find the differences between "merge" and "rebase" in above cases.

	merge --> it merge the commits to the branch in the same order they was created i.e. by there timestamps
	rebase --> remove the commits from the branch
		2. store them on temporary storage
		3. copy commit from the branch on master branch 1 by 1
		4. move the commits from temporary storage to the branch 1 by 1


20. Use git stash

	git stash
	git stash apply 	git stash apply @HEAD{0}

21. create a repository on github for your working repository and push changes on remote repository
